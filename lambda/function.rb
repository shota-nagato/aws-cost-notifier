require "aws-sdk-costexplorer"

def lambda_handler(event:, context:)
  cost_explorer = Aws::CostExplorer::Client.new(region: "ap-northeast-1")

  yesterday = Date.today - 1
  today = Date.today

  response = cost_explorer.get_cost_and_usage({
    time_period: {
      start: yesterday.strftime('%Y-%m-%d'),
      end: today.strftime('%Y-%m-%d')
    },
    granularity: "DAILY",
    metrics: ["BlendedCost"],
    group_by: [
      {
        type: "DIMENSION",
        key: "SERVICE"
      }
    ]
  })

  # ‰ªäÊúà„ÅÆÁ¥ØË®àÊñôÈáë„ÇíÂèñÂæó
  month_start = Date.new(today.year, today.month, 1)
  monthly_response = cost_explorer.get_cost_and_usage({
    time_period: {
      start: month_start.strftime('%Y-%m-%d'),
      end: today.strftime('%Y-%m-%d')
    },
    granularity: 'MONTHLY',
    metrics: ['BlendedCost']
  })

  # Êò®Êó•„ÅÆÊñôÈáë„ÇíÈõÜË®à
  daily_total = 0
  service_costs = []

  if response.results_by_time.any?
    response.results_by_time[0].groups.each do |group|
      service = group.keys[0]
      cost = group.metrics['BlendedCost']['amount'].to_f

      if cost > 0
        daily_total += cost
        service_costs << {
          service: service,
          cost: cost
        }
      end
    end
  end

  # ‰ªäÊúà„ÅÆÁ¥ØË®àÊñôÈáë
  monthly_total = 0
  if monthly_response.results_by_time.any?
    monthly_total = monthly_response.results_by_time[0].total['BlendedCost']['amount'].to_f
  end

  # „Çµ„Éº„Éì„ÇπÂà•ÊñôÈáë„Çí„Ç≥„Çπ„ÉàÈ†Ü„Å´„ÇΩ„Éº„Éà
  service_costs.sort_by! { |item| -item[:cost] }

  # Slack„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩúÊàê
  message = build_slack_message(yesterday, daily_total, monthly_total, service_costs)

  # Slack„Å´ÈÄÅ‰ø°
  send_to_slack(message)

  {
    statusCode: 200,
    body: JSON.generate({
      message: 'Cost notification sent successfully',
      daily_total: daily_total,
      monthly_total: monthly_total
    })
  }

rescue => e
  puts "Error: #{e.message}"
  puts e.backtrace

  {
    statusCode: 500,
    body: JSON.generate({
      error: e.message
    })
  }
end

def build_slack_message(date, daily_total, monthly_total, service_costs)
  # ‰∏ä‰Ωç5„Çµ„Éº„Éì„Çπ„ÅÆ„ÅøË°®Á§∫
  top_services = service_costs.take(5)

  services_text = top_services.map do |item|
    "‚Ä¢ #{item[:service]}: $#{sprintf('%.2f', item[:cost])}"
  end.join("\n")

  {
    text: "AWS Daily Cost Report - #{date.strftime('%Y-%m-%d')}",
    blocks: [
      {
        type: "header",
        text: {
          type: "plain_text",
          text: "üí∞ AWS Daily Cost Report"
        }
      },
      {
        type: "section",
        fields: [
          {
            type: "mrkdwn",
            text: "*Date:*\n#{date.strftime('%Y-%m-%d')}"
          },
          {
            type: "mrkdwn",
            text: "*Daily Cost:*\n$#{sprintf('%.2f', daily_total)}"
          },
          {
            type: "mrkdwn",
            text: "*Monthly Total:*\n$#{sprintf('%.2f', monthly_total)}"
          },
          {
            type: "mrkdwn",
            text: "*Currency:*\nUSD"
          }
        ]
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*Top Services (Yesterday):*\n#{services_text}"
        }
      },
      {
        type: "divider"
      },
      {
        type: "context",
        elements: [
          {
            type: "mrkdwn",
            text: "Generated by AWS Cost Notification Lambda"
          }
        ]
      }
    ]
  }
end

def send_to_slack(message)
  webhook_url = ENV['SLACK_WEBHOOK_URL']

  if webhook_url.nil? || webhook_url.empty?
    raise 'SLACK_WEBHOOK_URL environment variable is not set'
  end

  uri = URI(webhook_url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  request = Net::HTTP::Post.new(uri)
  request['Content-Type'] = 'application/json'
  request.body = JSON.generate(message)

  response = http.request(request)

  unless response.code == '200'
    raise "Failed to send message to Slack: #{response.code} #{response.message}"
  end

  puts "Message sent to Slack successfully"
end

